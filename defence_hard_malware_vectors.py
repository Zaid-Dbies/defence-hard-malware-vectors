import os
import subprocess
import time
import psutil
from colorama import Fore, Style, init

init(autoreset=True)

def disable_autorun():
    try:
        subprocess.run(["reg", "add", "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer",
                         "/v", "NoDriveTypeAutoRun", "/t", "REG_DWORD", "/d", "0xFF", "/f"], check=True)
        print(f"{Fore.GREEN}Autorun has been disabled successfully!{Style.RESET_ALL}")
    except subprocess.CalledProcessError as e:
        print(f"{Fore.RED}Error disabling Autorun: {e}{Style.RESET_ALL}")

def is_usb_drive(disk):
    return 'removable' in disk.opts.lower()

def process_usb_drive(usb_drive):
    print(f"{Fore.GREEN}USB drive detected: {usb_drive}{Style.RESET_ALL}")
    set_read_only(usb_drive)
    delete_inf_files(usb_drive)
    terminate_new_processes_from_usb(usb_drive)

def monitor_usb_drives():
    known_drives = set()
    while True:
        current_drives = set(disk.device for disk in psutil.disk_partitions() if is_usb_drive(disk))
        new_drives = current_drives - known_drives
        for drive in new_drives:
            process_usb_drive(drive)
        known_drives = current_drives
        time.sleep(1)

def set_read_only(usb_drive):
    attrib_command = f"attrib +r {usb_drive}\\* /s /d"
    try:
        subprocess.run(attrib_command, shell=True, check=True)
        print(f"{Fore.GREEN}Read-only permissions set for {usb_drive}{Style.RESET_ALL}")
    except subprocess.CalledProcessError as e:
        print(f"{Fore.RED}Error setting read-only: {e}{Style.RESET_ALL}")

def delete_inf_files(usb_drive): 
    try:
        for root, dirs, files in os.walk(usb_drive):
            for file in files:
                if file.lower().endswith(".inf"):
                    file_path = os.path.join(root, file)
                    print(f"Attempting to delete: {file_path}")
                    if os.path.exists(file_path):
                        # Attempt to change file attributes
                        subprocess.run(['attrib', '-H', '-S', '-R', file_path], check=False)
                        try:
                            os.remove(file_path)
                            print(f"{Fore.GREEN}Deleted .inf file: {file_path}{Style.RESET_ALL}")
                        except PermissionError:
                            print(f"{Fore.RED}Failed to delete due to permissions: {file_path}{Style.RESET_ALL}")
                        except FileNotFoundError:
                            print(f"{Fore.RED}File not found during deletion: {file_path}{Style.RESET_ALL}")
                    else:
                        print(f"{Fore.YELLOW}File not found: {file_path}{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}General error: {e}{Style.RESET_ALL}")

def terminate_new_processes_from_usb(usb_drive):
    before_set = get_process_set()
    after_set = get_process_set()

    new_processes = after_set.difference(before_set)
    for pid in new_processes:
        try:
            proc = psutil.Process(pid)
            proc.terminate()
            print(f"{Fore.RED}Terminated suspicious process {proc.name()} from {usb_drive}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}Error terminating process: {e}{Style.RESET_ALL}")

def get_process_set():
    return set(p.info['pid'] for p in psutil.process_iter(['pid', 'exe']))

if __name__ == "__main__":
    print(f"{Fore.YELLOW}Starting USB monitoring and disabling autorun...{Style.RESET_ALL}")
    disable_autorun()
    monitor_usb_drives()
